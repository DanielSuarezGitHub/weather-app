(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var o=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===o?new Date(n.getTime()):"number"==typeof n||"[object Number]"===o?new Date(n):("string"!=typeof n&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}const r=e=>new Intl.DisplayNames([],{type:"region"}).of(e),i=e=>Math.round(e-273.15),a=t=>{let r=function(t){return e(1,arguments),n(1e3*o(t))}(Date.now()/1e3+t).toUTCString(),i=r.slice(17,19),a=r.slice(20,22);return i>12?{hour:i-12,mins:a,AmPm:"PM"}:{hour:i,mins:a,AmPm:"AM"}};!async function(e){let t=await fetch("http://api.openweathermap.org/data/2.5/weather?q=Vancouver&APPID=00d5d7663e47cc4b2303d054f78d8e8f"),n=await t.json();var o;n={name:(o=n).name,country:o.sys.country,temp:o.main.temp,conditions:o.weather[0].description,timezone:o.timezone,windspeed:o.wind.speed,humidity:o.main.humidity,feels_like:o.main.feels_like};let s=n;s.timezone=a(s.timezone),s.country=r(s.country),s.temp=i(s.temp),s.feels_like=i(s.feels_like)}(),console.log("hello")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,