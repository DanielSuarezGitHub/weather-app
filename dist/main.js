(()=>{"use strict";function e(e,t){if(t.length<e)throw new TypeError(e+" argument"+(e>1?"s":"")+" required, but only "+t.length+" present")}function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function n(n){e(1,arguments);var o=Object.prototype.toString.call(n);return n instanceof Date||"object"===t(n)&&"[object Date]"===o?new Date(n.getTime()):"number"==typeof n||"[object Number]"===o?new Date(n):("string"!=typeof n&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function o(e){if(null===e||!0===e||!1===e)return NaN;var t=Number(e);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}async function r(e){try{let n=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${e}&APPID=00d5d7663e47cc4b2303d054f78d8e8f`),o=await n.json();if(!n.ok)throw new Error("City Not Found");return o={name:(t=o).name,country:t.sys.country,temp:t.main.temp,conditions:t.weather[0].description,timezone:t.timezone,windspeed:t.wind.speed,humidity:t.main.humidity,feels_like:t.main.feels_like},o.timezone=i.time(o.timezone),o.country=i.country(o.country),o.temp=i.kelvinToCelsius(o.temp),o.feels_like=i.kelvinToCelsius(o.feels_like),console.log(o),o}catch(e){console.error(e)}var t}const i={country:e=>new Intl.DisplayNames([],{type:"region"}).of(e),kelvinToCelsius:e=>Math.round(e-273.15),time:t=>{let r=function(t){return e(1,arguments),n(1e3*o(t))}(Date.now()/1e3+t).toUTCString(),i=r.slice(17,19),s=r.slice(20,22);return i>12?{hour:i-12,mins:s,AmPm:"PM"}:{hour:i,mins:s,AmPm:"AM"}}};(()=>{document.querySelector(".search > form").addEventListener("submit",(function(t){t.preventDefault(),r(e.value)}));let e=document.querySelector("#city")})(),r("Vancouver")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,